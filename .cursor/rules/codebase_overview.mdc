---
description: 
globs: 
alwaysApply: true
---
# Codebase Overview

## Project Description
This is a Next.js application for real-time agent communication using WebRTC. The application allows users to interact with different AI agents through text and voice interfaces.

## Directory Structure

### Root Directory
- `.next/`: Next.js build output
- `.env`: Environment variables
- `node_modules/`: Dependencies
- `package.json`: Project configuration and dependencies
- `tailwind.config.ts`: Tailwind CSS configuration
- `tsconfig.json`: TypeScript configuration
- `src/`: Source code directory
- `public/`: Static assets
- `postcss.config.mjs`: PostCSS configuration
- `next.config.ts`: Next.js configuration

### Source Code (`src/`)
The main application code is structured as follows:

#### Main Application Files
- `app/layout.tsx`: Root layout component for the application
- `app/page.tsx`: Main page component that renders the App component
- `app/App.tsx`: Core application component handling WebRTC connections and agent interactions
- `app/globals.css`: Global CSS styles
- `app/types.ts`: TypeScript type definitions for the entire application

#### Components
- `app/components/Transcript.tsx`: Displays conversation history between user and agent
- `app/components/Events.tsx`: Displays event logs for debugging
- `app/components/BottomToolbar.tsx`: Contains UI controls for user interaction

#### Contexts
- `app/contexts/TranscriptContext.tsx`: Manages transcript state
- `app/contexts/EventContext.tsx`: Manages event logging state

#### Hooks
- `app/hooks/useHandleServerEvent.ts`: Custom hook for handling server events

#### Libraries
- `app/lib/realtimeConnection.ts`: Utility for establishing WebRTC connections

#### API
- `app/api/chat/`: API endpoints for chat functionality
- `app/api/session/`: API endpoints for session management

#### Agent Configurations
- `app/agentConfigs/index.ts`: Exports all available agent configurations
- `app/agentConfigs/simpleExample.ts`: Example agent configuration
- `app/agentConfigs/utils.ts`: Utility functions for agent configurations
- `app/agentConfigs/voiceAgentMetaprompt.txt`: Agent prompt template
- `app/agentConfigs/customerServiceRetail/`: Customer service agent configurations
- `app/agentConfigs/frontDeskAuthentication/`: Front desk authentication agent configurations

## Key Functionality

### WebRTC Communication
The application uses WebRTC for real-time communication with AI agents. The main components of this system are:

1. `createRealtimeConnection()` in `lib/realtimeConnection.ts`: Establishes WebRTC connection
2. `App.tsx` manages the WebRTC connection lifecycle:
   - `connectToRealtime()`: Sets up the connection
   - `disconnectFromRealtime()`: Tears down the connection
   - `sendClientEvent()`: Sends events to the server

### Agent System
The application supports multiple configurable agents:

1. Agent configurations are defined in `app/agentConfigs/`
2. Each agent has:
   - A name
   - A description
   - Instructions
   - Available tools
   - Optional downstream agents for transfer

### State Management
The application uses React Context for state management:

1. `TranscriptContext`: Manages conversation history
2. `EventContext`: Manages event logs

### User Interface
The user interface is composed of:

1. Transcript area: Shows conversation history
2. Events panel: Shows technical events (for debugging)
3. Bottom toolbar: Contains controls for text input, voice input, and other settings

## Technologies Used
- Next.js
- React
- TypeScript
- WebRTC
- Tailwind CSS
- UUID for generating unique identifiers 